package com.master.business.service.user.impl;

import com.master.business.domain.iface.user.IRoleDao;
import com.master.business.domain.iface.user.IRolePowerDao;
import com.master.business.domain.iface.user.IUserDao;
import com.master.business.domain.iface.user.IUserRoleDao;
import com.master.business.domain.model.user.Role;
import com.master.business.domain.model.user.RolePower;
import com.master.business.domain.model.user.User;
import com.master.business.domain.model.user.UserRole;
import com.master.business.service.user.IRoleService;
import com.master.core.framework.db.PagerBean;
import com.master.core.framework.db.QueryBean;
import com.master.core.framework.exception.BpmsException;
import com.master.core.framework.web.AuthUser;
import com.master.core.framework.web.BaseService;
import com.master.core.framework.web.ResultData;
import com.master.core.util.Strings;
import org.aspectj.weaver.ast.Var;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;


/**
 * IRoleService 服务接口实现
 *
 * @author 123
 * @version v1.0.0
 * @since jdk1.8+
 */
@Service
public class RoleServiceImpl extends BaseService implements IRoleService {
    private Logger log = LoggerFactory.getLogger(RoleServiceImpl.class);

    @Autowired
    private IRoleDao roleDao;

    @Autowired
    private IUserDao userDao;
    @Autowired
    private IRolePowerDao rolePowerDao;
    @Autowired
    private IUserRoleDao userRoleDao;

    @Override
    public ResultData get(String roleid, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始查询 roleid=[{}]. ", roleid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Role role = roleDao.get(roleid);
        resData.setData("role", role);
        log.info("###[服务] 完成查询 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData find(Role role, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询", role);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        List<Role> roles = roleDao.find(role);
        resData.setData("roles", roles);
        log.info("###[服务] 完成查询 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData findPager(Role role, PagerBean page, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询", role);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();

        page = new PagerBean(20, page.getCurrentPage());
        page.setOrderKey("intime");
        page.setAscend("desc");

        Map<String, Object> _data = new HashMap<String, Object>();

        QueryBean<Role> query = new QueryBean<Role>(page, role);
        List<Role> roles = roleDao.findByPage(query);

        _data.put("roles", getFieldValueList(roles));
        _data.put("page", page.parseMap());
        resData.setData(_data);

        log.info("###[服务] 完成分页查询 resData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData add(Role role, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始添加新, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int inserted = roleDao.insert(role);
        resData.setData("inserted", inserted);
        log.info("###[服务] 完成添加新，ResultData=[{}]", resData);
        return resData;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public ResultData update(Role role, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始修改, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int updated = roleDao.update(role);
        resData.setData("updated", updated);
        log.info("###[服务] 完成修改，ResultData=[{}]", resData);
        return resData;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public ResultData delete(String roleid, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始删除, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Role role = new Role();
        role.setRoleid(roleid);
        int deleted = roleDao.delete(role);
        resData.setData("deleted", deleted);
        log.info("###[服务] 完成删除，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData listRole(AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始查询角色列表, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Set<Role> roles1 = roleDao.listRole();
        resData.setData("roles", roles1);
        log.info("###[服务] 完成查询 ResultData=[{}]", resData);
        return resData;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public ResultData addRole(Role role, AuthUser authuser) {
        log.debug("###[服务] 开始添加新角色, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        role.setRoleid(Strings.produceRandomStringByAllChar(32));
        int inserted = roleDao.insert(role);
        List<String> list = Arrays.asList(role.getPermissions());
        rolePowerDao.insertRolePermission(role.getRoleid(), list);
        resData.setData("inserted", inserted);
        log.info("###[服务] 完成添加新，ResultData=[{}]", resData);
        return resData;
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public ResultData removeRole(String roleid, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始删除, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        UserRole uRole = new UserRole();
        uRole.setRoleid(roleid);
        List<UserRole> userRoles = userRoleDao.find(uRole);
        if (userRoles.size() > 0) {
            throw new BpmsException("10008", "角色删除失败,尚有用户属于此角色");
        }
        int deleted = roleDao.removeRole(roleid);
        int delete = rolePowerDao.removeRoleAllPermission(roleid);
        resData.setData("deleted", deleted + delete);
        log.info("###[服务] 完成删除，ResultData=[{}]", resData);
        return resData;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public ResultData updateRole(Role role, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始更新角色, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int updated = roleDao.update(role);
        int delete = rolePowerDao.removeRoleAllPermission(role.getRoleid());
        List<String> list = Arrays.asList(role.getPermissions());
        int insert = rolePowerDao.insertRolePermission(role.getRoleid(), list);
        resData.setData("updated", updated);
        log.info("###[服务] 完成更新角色，ResultData=[{}]", resData);
        return resData;
    }
}
