package com.master.business.service.user.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


import com.master.business.domain.iface.user.*;
import com.master.business.domain.model.user.*;
import com.master.core.util.MD5Util;
import com.master.core.util.Strings;
import com.master.core.util.model.UserInfo;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.aspectj.weaver.ast.Var;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.master.core.framework.web.BaseService;
import com.master.core.framework.db.PagerBean;
import com.master.core.framework.db.QueryBean;
import com.master.core.framework.web.AuthUser;
import com.master.core.framework.web.ResultData;

import com.master.business.service.user.IUserService;


/**
 * IUserService  服务接口实现
 *
 * @author 123
 * @version v1.0.0
 * @since jdk1.8+
 */
@Service
public class UserServiceImpl extends BaseService implements IUserService {
    private Logger log = LoggerFactory.getLogger(UserServiceImpl.class);

    @Autowired
    private IUserDao userDao;

    @Autowired
    private IUserRoleDao userRoleDao;

    @Autowired
    private IRoleDao roleDao;

    @Autowired
    private IPowerDao powerDao;

    @Override
    public ResultData get(String userid, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始查询 userid=[{}]. ", userid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        User user = userDao.get(userid);
        resData.setData("user", user);
        log.info("###[服务] 完成查询 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData find(User user, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询", user);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        List<User> users = userDao.find(user);
        resData.setData("users", users);
        log.info("###[服务] 完成查询 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData findPager(User user, PagerBean page, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询", user);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        page = new PagerBean(page.getPageSize() == null ? 20 : page.getPageSize(), page.getCurrentPage());
        page.setOrderKey("intime");
        page.setAscend("desc");

        Map<String, Object> _data = new HashMap<String, Object>();

        QueryBean<User> query = new QueryBean<User>(page, user);
        List<User> users = userDao.findByPage(query);
        UserRole userRole = new UserRole();
        List<UserRole> userRoleAll = userRoleDao.find(userRole);
        Role role = new Role();
        List<Role> roleAll = roleDao.find(role);
        for (int i = 0; i < users.size(); i++) {
            for (UserRole userRole1 : userRoleAll) {
                if (users.get(i).getUserid().equals(userRole1.getUserid())) {
                    for (Role role1 : roleAll) {
                        if (userRole1.getRoleid().equals(role1.getRoleid())) {
                            users.get(i).setRolename(role1.getRolename());
                            users.get(i).setRoleid(role1.getRoleid());
                        }
                    }
                }
            }
        }

        users.forEach(use -> {
            userRoleAll.forEach(urole -> {

            });
        });

        _data.put("users", getFieldValueList(users));
        _data.put("page", page.parseMap());
        resData.setData(_data);

        log.info("###[服务] 完成分页查询 resData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData add(User user, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始添加新, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        user.setUserid(Strings.produceRandomStringByAllChar(32));
        user.setPassword(MD5Util.MD5Pwd(user.getUsername(), user.getPassword()));
        int inserted = userDao.insert(user);
        UserRole userRole = new UserRole();
        userRole.setRoleid(user.getRoleid());
        userRole.setUserid(user.getUserid());
        int insert = userRoleDao.insert(userRole);
        resData.setData("inserted", inserted + insert);
        log.info("###[服务] 完成添加新，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData update(User user, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始修改, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        UserRole uRole = userRoleDao.get(user.getUserid());
        user.setPassword(MD5Util.MD5Pwd(user.getUsername(), user.getPassword()));
        int updated = userDao.update(user);
        int update = 0;
        if (!uRole.getRoleid().equals(user.getRoleid())) {
            uRole.setRoleid(user.getRoleid());
            update = userRoleDao.update(uRole);
        }
        resData.setData("updated", updated + update);
        log.info("###[服务] 完成修改，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData delete(String userid, AuthUser authuser) throws Exception {
        log.debug("###[服务] 开始删除, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        User user = new User();
        user.setUserid(userid);
        int deleted = userDao.delete(user);
        resData.setData("deleted", deleted);
        log.info("###[服务] 完成删除，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData powerInfo(AuthUser authuser) {
        log.debug("###[服务] 开始查询用户角色权限, 操作用户:{}", authuser.getUsername());
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        //根据用户id查出对应角色
        Role role = roleDao.getRole(authuser.getUserid());
        //根据角色id 查询角色对应权限
        Set<String> menucode = powerDao.getMenuCode(role.getRoleid());//根据角色id 获取对应的权限id
        Set<String> permissioncode = powerDao.getPermissioncode(role.getRoleid());
        UserInfo userInfo = new UserInfo();
        userInfo.setUseid(authuser.getUserid());
        userInfo.setNickname(authuser.getUsername());
        userInfo.setRoleid(role.getRoleid());
        userInfo.setRoleName(role.getRolename());
        userInfo.setMenuList(menucode);
        userInfo.setPermissionList(permissioncode);
        if (role.getRolename().equals("系统管理员")) {
            //根据角色id 查询角色对应权限
            Set<String> menucode1 = powerDao.getAllMenu();//根据角色id 获取对应的权限id
            Set<String> permissioncode1 = powerDao.getAllPermission();
            userInfo.setMenuList(menucode1);
            userInfo.setPermissionList(permissioncode1);
        }


        resData.setData("userPermission", userInfo);
        log.info("###[服务] 完成查询用户角色权限，ResultData=[{}]", resData);
        return resData;
    }


}
